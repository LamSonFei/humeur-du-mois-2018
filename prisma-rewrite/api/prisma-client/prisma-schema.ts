// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type Agency {
  name: String!
}

type AgencyConnection {
  pageInfo: PageInfo!
  edges: [AgencyEdge]!
  aggregate: AggregateAgency!
}

input AgencyCreateInput {
  name: String!
}

input AgencyCreateOneInput {
  create: AgencyCreateInput
  connect: AgencyWhereUniqueInput
}

type AgencyEdge {
  node: Agency!
  cursor: String!
}

enum AgencyOrderByInput {
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AgencyPreviousValues {
  name: String!
}

type AgencySubscriptionPayload {
  mutation: MutationType!
  node: Agency
  updatedFields: [String!]
  previousValues: AgencyPreviousValues
}

input AgencySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AgencyWhereInput
  AND: [AgencySubscriptionWhereInput!]
  OR: [AgencySubscriptionWhereInput!]
  NOT: [AgencySubscriptionWhereInput!]
}

input AgencyUpdateDataInput {
  name: String
}

input AgencyUpdateInput {
  name: String
}

input AgencyUpdateManyMutationInput {
  name: String
}

input AgencyUpdateOneInput {
  create: AgencyCreateInput
  update: AgencyUpdateDataInput
  upsert: AgencyUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: AgencyWhereUniqueInput
}

input AgencyUpsertNestedInput {
  update: AgencyUpdateDataInput!
  create: AgencyCreateInput!
}

input AgencyWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [AgencyWhereInput!]
  OR: [AgencyWhereInput!]
  NOT: [AgencyWhereInput!]
}

input AgencyWhereUniqueInput {
  name: String
}

type AggregateAgency {
  count: Int!
}

type AggregateEmployee {
  count: Int!
}

type AggregateSurvey {
  count: Int!
}

type AggregateSurveyAnswer {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Employee {
  fullName: String
  email: String!
  manager: Employee
  agency: Agency
}

type EmployeeConnection {
  pageInfo: PageInfo!
  edges: [EmployeeEdge]!
  aggregate: AggregateEmployee!
}

input EmployeeCreateInput {
  fullName: String
  email: String!
  manager: EmployeeCreateOneInput
  agency: AgencyCreateOneInput
}

input EmployeeCreateOneInput {
  create: EmployeeCreateInput
  connect: EmployeeWhereUniqueInput
}

type EmployeeEdge {
  node: Employee!
  cursor: String!
}

enum EmployeeOrderByInput {
  fullName_ASC
  fullName_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmployeePreviousValues {
  fullName: String
  email: String!
}

type EmployeeSubscriptionPayload {
  mutation: MutationType!
  node: Employee
  updatedFields: [String!]
  previousValues: EmployeePreviousValues
}

input EmployeeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmployeeWhereInput
  AND: [EmployeeSubscriptionWhereInput!]
  OR: [EmployeeSubscriptionWhereInput!]
  NOT: [EmployeeSubscriptionWhereInput!]
}

input EmployeeUpdateDataInput {
  fullName: String
  email: String
  manager: EmployeeUpdateOneInput
  agency: AgencyUpdateOneInput
}

input EmployeeUpdateInput {
  fullName: String
  email: String
  manager: EmployeeUpdateOneInput
  agency: AgencyUpdateOneInput
}

input EmployeeUpdateManyMutationInput {
  fullName: String
  email: String
}

input EmployeeUpdateOneInput {
  create: EmployeeCreateInput
  update: EmployeeUpdateDataInput
  upsert: EmployeeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: EmployeeWhereUniqueInput
}

input EmployeeUpsertNestedInput {
  update: EmployeeUpdateDataInput!
  create: EmployeeCreateInput!
}

input EmployeeWhereInput {
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  manager: EmployeeWhereInput
  agency: AgencyWhereInput
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
}

input EmployeeWhereUniqueInput {
  email: String
}

enum Feeling {
  GREAT
  NOT_THAT_GREAT
  NOT_GREAT_AT_ALL
}

scalar Long

type Mutation {
  createAgency(data: AgencyCreateInput!): Agency!
  updateAgency(data: AgencyUpdateInput!, where: AgencyWhereUniqueInput!): Agency
  updateManyAgencies(data: AgencyUpdateManyMutationInput!, where: AgencyWhereInput): BatchPayload!
  upsertAgency(where: AgencyWhereUniqueInput!, create: AgencyCreateInput!, update: AgencyUpdateInput!): Agency!
  deleteAgency(where: AgencyWhereUniqueInput!): Agency
  deleteManyAgencies(where: AgencyWhereInput): BatchPayload!
  createEmployee(data: EmployeeCreateInput!): Employee!
  updateEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee
  updateManyEmployees(data: EmployeeUpdateManyMutationInput!, where: EmployeeWhereInput): BatchPayload!
  upsertEmployee(where: EmployeeWhereUniqueInput!, create: EmployeeCreateInput!, update: EmployeeUpdateInput!): Employee!
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteManyEmployees(where: EmployeeWhereInput): BatchPayload!
  createSurvey(data: SurveyCreateInput!): Survey!
  updateSurvey(data: SurveyUpdateInput!, where: SurveyWhereUniqueInput!): Survey
  updateManySurveys(data: SurveyUpdateManyMutationInput!, where: SurveyWhereInput): BatchPayload!
  upsertSurvey(where: SurveyWhereUniqueInput!, create: SurveyCreateInput!, update: SurveyUpdateInput!): Survey!
  deleteSurvey(where: SurveyWhereUniqueInput!): Survey
  deleteManySurveys(where: SurveyWhereInput): BatchPayload!
  createSurveyAnswer(data: SurveyAnswerCreateInput!): SurveyAnswer!
  updateManySurveyAnswers(data: SurveyAnswerUpdateManyMutationInput!, where: SurveyAnswerWhereInput): BatchPayload!
  deleteManySurveyAnswers(where: SurveyAnswerWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  agency(where: AgencyWhereUniqueInput!): Agency
  agencies(where: AgencyWhereInput, orderBy: AgencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Agency]!
  agenciesConnection(where: AgencyWhereInput, orderBy: AgencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AgencyConnection!
  employee(where: EmployeeWhereUniqueInput!): Employee
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee]!
  employeesConnection(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeeConnection!
  survey(where: SurveyWhereUniqueInput!): Survey
  surveys(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Survey]!
  surveysConnection(where: SurveyWhereInput, orderBy: SurveyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SurveyConnection!
  surveyAnswers(where: SurveyAnswerWhereInput, orderBy: SurveyAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SurveyAnswer]!
  surveyAnswersConnection(where: SurveyAnswerWhereInput, orderBy: SurveyAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SurveyAnswerConnection!
  node(id: ID!): Node
}

type Subscription {
  agency(where: AgencySubscriptionWhereInput): AgencySubscriptionPayload
  employee(where: EmployeeSubscriptionWhereInput): EmployeeSubscriptionPayload
  survey(where: SurveySubscriptionWhereInput): SurveySubscriptionPayload
  surveyAnswer(where: SurveyAnswerSubscriptionWhereInput): SurveyAnswerSubscriptionPayload
}

type Survey {
  iso: String!
}

type SurveyAnswer {
  agency: Agency!
  survey: Survey!
  feeling: Feeling!
}

type SurveyAnswerConnection {
  pageInfo: PageInfo!
  edges: [SurveyAnswerEdge]!
  aggregate: AggregateSurveyAnswer!
}

input SurveyAnswerCreateInput {
  agency: AgencyCreateOneInput!
  survey: SurveyCreateOneInput!
  feeling: Feeling!
}

type SurveyAnswerEdge {
  node: SurveyAnswer!
  cursor: String!
}

enum SurveyAnswerOrderByInput {
  feeling_ASC
  feeling_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SurveyAnswerPreviousValues {
  feeling: Feeling!
}

type SurveyAnswerSubscriptionPayload {
  mutation: MutationType!
  node: SurveyAnswer
  updatedFields: [String!]
  previousValues: SurveyAnswerPreviousValues
}

input SurveyAnswerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SurveyAnswerWhereInput
  AND: [SurveyAnswerSubscriptionWhereInput!]
  OR: [SurveyAnswerSubscriptionWhereInput!]
  NOT: [SurveyAnswerSubscriptionWhereInput!]
}

input SurveyAnswerUpdateManyMutationInput {
  feeling: Feeling
}

input SurveyAnswerWhereInput {
  agency: AgencyWhereInput
  survey: SurveyWhereInput
  feeling: Feeling
  feeling_not: Feeling
  feeling_in: [Feeling!]
  feeling_not_in: [Feeling!]
  AND: [SurveyAnswerWhereInput!]
  OR: [SurveyAnswerWhereInput!]
  NOT: [SurveyAnswerWhereInput!]
}

type SurveyConnection {
  pageInfo: PageInfo!
  edges: [SurveyEdge]!
  aggregate: AggregateSurvey!
}

input SurveyCreateInput {
  iso: String!
}

input SurveyCreateOneInput {
  create: SurveyCreateInput
  connect: SurveyWhereUniqueInput
}

type SurveyEdge {
  node: Survey!
  cursor: String!
}

enum SurveyOrderByInput {
  iso_ASC
  iso_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SurveyPreviousValues {
  iso: String!
}

type SurveySubscriptionPayload {
  mutation: MutationType!
  node: Survey
  updatedFields: [String!]
  previousValues: SurveyPreviousValues
}

input SurveySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SurveyWhereInput
  AND: [SurveySubscriptionWhereInput!]
  OR: [SurveySubscriptionWhereInput!]
  NOT: [SurveySubscriptionWhereInput!]
}

input SurveyUpdateInput {
  iso: String
}

input SurveyUpdateManyMutationInput {
  iso: String
}

input SurveyWhereInput {
  iso: String
  iso_not: String
  iso_in: [String!]
  iso_not_in: [String!]
  iso_lt: String
  iso_lte: String
  iso_gt: String
  iso_gte: String
  iso_contains: String
  iso_not_contains: String
  iso_starts_with: String
  iso_not_starts_with: String
  iso_ends_with: String
  iso_not_ends_with: String
  AND: [SurveyWhereInput!]
  OR: [SurveyWhereInput!]
  NOT: [SurveyWhereInput!]
}

input SurveyWhereUniqueInput {
  iso: String
}
`